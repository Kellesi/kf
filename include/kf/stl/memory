#pragma once
#include <memory>
#include <type_traits>

template<typename T, POOL_TYPE PoolType, typename... TArgs>
inline std::unique_ptr<T> make_unique(TArgs&&... Args) noexcept requires !std::is_array_v<T>
{
    return std::unique_ptr<T>(new(PoolType) T(std::forward<TArgs>(Args)...));
}

template<typename T, POOL_TYPE poolType>
inline std::unique_ptr<T> make_unique(std::size_t size) noexcept requires std::is_array_v<T>
{
    return std::unique_ptr<T>(new(poolType) std::remove_extent_t<T>[size]());
}
